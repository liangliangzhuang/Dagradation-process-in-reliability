---
title: "逆高斯退化过程"
author: "庄亮亮"
format: 
  html:
    toc: TRUE
    toc-depth: 5
    toc-title: "目录"
    theme: cerulean
    code-tools: true
    highlight-style: cerulean.theme
    code-line-numbers: true
    code-block-bg: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

```{r include=FALSE}
library(ggplot2)
library(tidyverse)
library(viridis)
```



## 3. IG 退化过程模型

<!-- > 来源：Ye, Z.-S. and M. Xie (2015). "Stochastic modelling and analysis of degradation for highly reliable products." Applied Stochastic Models in Business and Industry 31(1): 16-32. -->

虽然 Wiener 过程和 Gamma 过程在退化建模中得到了广泛的应用，但这两种模型在实际应用中无法拟合大量退化数据。当这两个过程失败时，另一个选择是逆高斯(inverse Gaussian, IG)过程。

### 3.1 经典的 IG 过程

设$X(t)$为产品在$t$时刻的退化特性。假设退化路径$X(t)$可以用参数$\mu$和$\lambda$的IG过程来建模。此时，$X(t)$具有以下属性:

-   $X(0)=0$，概率为1;
-   对于 $t>s>u, X(t)-X(s) \geq 0, X(s)-X(u) \geq 0$, $X(t)-X(s)$ 与 $X(s)-X(u)$ 相互独立;
-   对于 $t>s \geq 0$, 每个增量 $X(t)-X(s)$ 都服从 IG 分布 $I G\left(\mu (t-s), \lambda(t-s)^2\right)$。

IG 分布的概率密度函数(pdf) $I G(a, b)$为 $$
f_{I G}(x, a, b)=\left[\frac{b}{2 \pi x^3}\right]^{1 / 2} \exp \left\{-\frac{b(x-a)^2}{2 a^2 x}\right\}
$$ 累计分布函数（cdf）为 $$
F_{IG}(x, a, b)=\Phi\left[\sqrt{\frac{b}{x}}\left(\frac{x}{a}-1\right)\right]+\exp \left(\frac{2 b}{a}\right) \Phi\left[-\sqrt{\frac{b}{x}}\left(\frac{x}{a}+1\right)\right], X>0 .
$$

**产品寿命/首达时分布**

令 $T$ 为$X(t)$越过临界值$l$的首达时。此时，我们有 $$
T=\inf \{t \mid X(t) \geq l, t>0\} .
$$ 对于给定的$l$，生命周期$T$具有以下 cdf

$$
\begin{aligned}
F(t) &=P(T \leq t)=P(X(t)>l)=1-F_{I G}\left(l ; \mu t, \lambda t^2\right) \\
&=\Phi\left[ \sqrt{\frac{\lambda}{l}}(t - \frac{l}{\mu})
\right] - \exp\left({\frac{2 \lambda t}{\mu}}\right) \Phi\left[-\sqrt{\frac{\lambda}{l}}(\frac{l}{\mu} +t)\right]
\end{aligned}$$

其中 $\Phi(\cdot)$ 为标准正态分布的cdf。

**剩余使用寿命**


假设其运行到时刻 $\tau$ 仍末失效, 且当前性能退化量为 $x_\tau\left(x_\tau<l\right)$, 则产品的剩余寿命 $T_1$ 可以表示为 $$
T_1=\inf \left\{t \mid X(t+\tau) \geqslant l, X(\tau)=x_\tau, t \geqslant 0\right\}
$$ 
其密度函数只需将寿命 $T$ 密度函数中的失效阈值 $l$ 替换为 $l-x_\tau$, 即


$$
\begin{aligned}
F_{T_1}(t) = \Phi\left[ \sqrt{\frac{\lambda}{l-x_\tau}}(t - \frac{l}{\mu})
\right] - \exp\left({\frac{2 \lambda t}{\mu}}\right) \Phi\left[-\sqrt{\frac{\lambda}{l-x_\tau}}(\frac{l-x_\tau}{\mu} +t)\right]
\end{aligned}$$



$$
\begin{aligned}
f_{T_1}(t)= & \phi\left(\sqrt{\frac{\lambda}{l-x_\tau}}\left(t-\frac{l}{\mu}\right)\right) \cdot \sqrt{\frac{\lambda}{l-x_\tau}}-\frac{2 \lambda}{\mu} \exp \left(\frac{2 \lambda t}{\mu}\right) \Phi\left(-\sqrt{\frac{\lambda}{l-x_\tau}}\left(\frac{l-x_\tau}{\mu}+t\right)\right) \\
& +\exp \left(\frac{2 \lambda t}{\mu}\right) \phi\left(-\sqrt{\frac{\lambda}{l-x_\tau}}\left(\frac{l-x_\tau}{\mu}+t\right)\right) \cdot \sqrt{\frac{\lambda}{l-x_\tau}}
\end{aligned}
$$






#### 3.1.2 统计推断

令$X\left(t_{ij}\right)$为第$i$个测试单元在$t_{ij}$时刻测量的退化特性，其中$i=1， \ldots, n$和$j=$ $1， \ldots, m_i$。

##### 3.1.2.1 极大似然估计

根据$\Delta x_{ij}=X\left(t_{ij}\right)-X\left(t_{ij -1}\right)， i=1， \ldots n, j=1， \ldots, m_i$， $(\mu, \lambda)$的似然函数为 $$
L(\mu, \lambda)=\prod_{i=1}^n \prod_{j=1}^{m_i} f_{I G}\left(\Delta x_{i j}, \mu \Delta t_{i j}, \lambda \Delta^2 t_{i j}\right).
$$ 对数似然函数为： 
$$
\log L(\mu, \lambda) \propto \sum_{i=1}^n \sum_{j=1}^{m_i}\left(\frac{1}{2} \log (\lambda)+\log \Delta t_{i j}-\frac{3}{2} \log \left(\Delta x_{i j}\right)-\frac{\lambda\left(\Delta x_{i j}-\mu \Delta t_{i j}\right)^2}{2 \mu^2 \Delta x_{i j}}\right)
$$

##### 3.1.2.2 贝叶斯估计



### 3.3 模拟数据分析

#### 数据模拟产生

```{r include=FALSE}
# 数据模拟产生
sim_dat = function(group = 6, t = 1:200, para = c(2,2)){
  library(SuppDists)
  # para 指 mu,lambda 
  # epoch 指测量次数，group 指组数
  delta_t = diff(t)
  epoch = length(delta_t)
  dat = matrix(NA,epoch,group+1)
  dat[,1] = seq(1,epoch)
  dat_unit = numeric()
  for(i in 1:group){
    for(j in 1:epoch) dat_unit[j] = rinvGauss(1,para[1]*delta_t[j], para[2] * (delta_t[j])^2)  #来自SuppDists包，注意与statmod包不同rinvgauss()
    dat[,i+1] = cumsum(dat_unit)
  }
  dat = data.frame(dat)
  dat1 = rbind(rep(0,group+1),dat) # 加入初始值绘制点
  colnames(dat1) = c("Time",paste(1:group,sep=''))
  return(dat1)
}
```

#### 绘制退化路径图

```{r include=FALSE}
# 绘制退化路径图
plot_path = function(data = dat1){
    # 画图
  p = data %>% pivot_longer(paste(1:group), 
                       names_to = "Group", 
                       values_to = "y") %>% 
    ggplot(aes(Time,y,color = Group)) + 
    geom_line() + 
    scale_color_viridis(discrete = T) + 
    ylab("Degradation") #+
    #theme_bw() +
    #theme(panel.grid = element_blank())
  print(p)
}
```

```{r }
group = 6
t = 1:200
para = c(5,5) #eta,lambda
dat = sim_dat(group = group, t = t, para = para)
knitr::kable(head(dat))
plot_path(dat)
```

#### 极大似然估计

```{r include=FALSE}
cumsub = function(x){
  #完成逐个相减功能，类似cumsum
  re = numeric()
  re[1] = x[1]
  for(i in 2:length(x)){
    re[i] = x[i] - x[i-1]
  }
  return(re)
}
```

```{r include=FALSE}
IG_mle = function(par = c(2,2),data = dat){
  # 输入：mu,lambda，数据
  # 输出：负对数似然函数
  group = ncol(data) - 1;time = data[,1];y = data[-1,-1]
  # 差分得到delta_time和delta_y
  delta_time = matrix(rep(diff(time),group),length(diff(time)),group)
  delta_y = matrix(NA,nrow(delta_time),group)
  for(i in 1:group) delta_y[,i] = cumsub(y[,i])

  logl = nrow(delta_time) * group * 1/2 * log(par[2]) + sum(log(delta_time) - 3/2 * log(delta_y) - (par[2]*(delta_y - par[1]*delta_time)^2)/(2 * par[1]^2 * delta_y),na.rm =T)

  return(-logl)
}
```

```{r}
mle_re = optim(par=c(0.6,5), fn = IG_mle, 
      data = dat, method = "BFGS", hessian = TRUE)
mle_re$par
mle_par = mle_re$par
# 区间估计
mle_up = mle_re$par + sqrt(diag(solve(mle_re$hessian)))*qnorm(0.975)
mle_low = mle_re$par - sqrt(diag(solve(mle_re$hessian)))*qnorm(0.975) #hessian 和协方差矩阵存在逆的关系：https://blog.csdn.net/anruoxi3236/article/details/102005217
mle_summary = round(cbind(mle_low,mle_re$par,mle_up,para),3)
colnames(mle_summary) = c("low","mean","up","true")
knitr::kable(mle_summary) 
```



#### 可靠度和 RUL 计算

- 可靠度
```{r,include=FALSE}
## 可靠度计算
IG_R = function(t = 100, threshold = 200, par = mle_par){
  R = 1 - pnorm(sqrt(par[2]/threshold)*(t - threshold/par[1])) +
    exp(2*par[2]*t/par[1])*pnorm(-sqrt(par[2]/threshold) *(threshold/par[1] + t))
  return(R)
}
```


```{r}
# 给个简单例子
IG_R(t = 30, threshold = 150,par = mle_par)
# 绘制带区间估计的可靠度函数（需要优化为 ggplot 绘制）
R_time = 1:60
R_data = data.frame("Time" = R_time,
  "Up" = IG_R(t = R_time, threshold = 150,par = mle_up),
           "Mean" = IG_R(t = R_time, threshold = 150,par = mle_par),
           "Low" = IG_R(t = R_time, threshold = 150,par = mle_low))

# 绘制带区间估计的可靠度函数
ggplot(R_data) +
  geom_line(aes(Time,Up),color = "gray60",linetype = 2) +
  geom_line(aes(Time,Mean)) +
  geom_line(aes(Time,Low),color = "gray60",linetype = 2) +
  ylab("Reliability") + xlab("time")
```

- RUL


```{r,include=FALSE}
## 剩余使用寿命 ========
RUL = function(t = 50:100, cur_time = 30, threshold = 300, data = dat, par = mle_par){
  RUL = list()
  cur_path = as.numeric(data[cur_time,])
  for(i in 1:(ncol(data)-1)){
      RUL[[i]] = numeric()
      ll = sqrt(par[2])/sqrt((threshold - cur_path[i]))
      RUL[[i]] = dnorm(ll * (t - threshold/par[1])) * ll - 2*par[2]/par[1] * exp(2 * par[2] * t / par[1]) * pnorm(- ll * ((threshold - cur_path[i])/par[1] + t)) +
        exp(2*par[2]*t/par[1]) * dnorm(-ll * ((threshold - cur_path[i])/par[1] + t) ) * ll
    }
  return(RUL)
}
```

```{r,include=FALSE}
# 未来时刻fut_time下的RUL值
RUL_3D_density = function(fut_time,time_epoch,rul_den,
                          threshold,real_RUL,
                          zlim = c(0,0.1),xlim = c(0,100)){
  library(plot3D)
  col = c("#02B1e6", "#E81D22", "#F9BC15", "#8015f9", "#20e81d", "#e64602","black")
  scatter3D(time_epoch, rep(1,length(time_epoch)), c(rul_den[[1]],rep(NA,length(time_epoch) - length(rul_den[[1]]))),
            bty = "b2",colkey = FALSE,
            phi = 14,theta = 55,
            pch = 18,alpha = 0, expand =0.2,ticktype = "detailed",
            xlim = xlim,
            ylim = c(min(fut_time)-5,max(fut_time)+5),
            zlim = zlim,
            xlab = "RUL", ylab = "Time", zlab = "Kernel Distribution")
  # 循环绘制3D图形
  for(i in 1:length(fut_time)){
    # 密度函数
    scatter3D(time_epoch, rep(fut_time[i],length(time_epoch)), c(rul_den[[i]],rep(NA,length(time_epoch) - length(rul_den[[i]]))),
              add = TRUE,type ='l', col = col[i], pch = 16)
    # 预测值
    scatter3D(which.max(rul_den[[i]]), fut_time[i], 0,
              add = TRUE, type ='h', col = "black", pch = 16)
    # 真实值
    scatter3D(real_RUL[i],fut_time[i], 0,
              add = TRUE, type ='h', col = "red", pch = 5)
  }
  legend("top", legend = c("RUL distribution","Point estimation","Real value"),
         pch=c(NA,16,5), col = c(col[1],"black","red"),lty = c(1,NA,NA)) #,inset = .05
  # 7.8,6.4
}

```

```{r}
  fut_time = c(50,60,70,80,90,100)
  time_epoch = 0:150; threshold = 300
  para = mle_par
  rul_den = list()
  for(i in 1:length(fut_time)){
    rul_den[[i]] = RUL(t = time_epoch, cur_time = fut_time[i],
                      threshold = threshold, par = para)[[1]]
  }
  # sapply(rul_den,which.max)
  
  p = RUL_3D_density(fut_time,time_epoch,rul_den,threshold,
                     real_RUL = NA,zlim = c(0,0.08), xlim = c(0,150))
```



### 激光器件 Laser 数据集

> 数据集来自 Meeker, W. Q. (1998). Statistical Methods for Reliability Data。

激光器件的质量特征是其**工作电流**。当工作电流达到预定义的阈值水平ω = 10时，该设备被认为是故障。其电流的测量频率为每250小时一次，实验在4000小时时终止。图1(a)显示了15个被测试单元的退化路径及其拟合的平均趋势。

```{r}
Laser_dat = read.csv("dataset/GaAsLaser.csv")
knitr::kable(head(Laser_dat))
Laser_dat$Unit = as.factor(Laser_dat$Unit)
```

```{r}
Laser_dat %>% ggplot(aes(Hours,Value,fill = Unit)) +
  geom_line(size = 0.1) + 
  geom_point(size = 0.8) + 
  theme_bw() +
  theme(panel.grid.major = element_blank()) +
  # scale_color_viridis(discrete = T) + 
  theme(legend.position = 'none') +
  labs(x = "Hours", y = "Degradation characteristic")
```

### 防辐射 Anti-radiation 数据集

> 数据来源：Song, B., et al. (2017). "Performance evaluation of anti-radiation based on the gamma degradation process." Science China Technological Sciences 60(4): 501-509.

> 分析结果参考：Guan, Q., et al. (2019). "Reference Bayesian analysis of inverse Gaussian degradation process." Applied Mathematical Modelling 74: 496-511.（IG + 客观贝叶斯）

数据还未下载（文中有，具体怎么做的试验，还未学习），pdf已经存在Endnote中了。

Peng, W. W., et al. (2014). "Inverse Gaussian process models for degradation analysis: A Bayesian perspective." Reliability Engineering & System Safety **130**: 175-189.（贝叶斯相关）

\
